
Praktikum 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000640  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e8  080007f0  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007e8  080007e8  000107f0  2**0
                  CONTENTS
  4 .ARM          00000000  080007e8  080007e8  000107f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e8  080007f0  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ec  080007ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000107f0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000810  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000298  00000000  00000000  00011030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000112c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b0  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000142f  00000000  00000000  00011450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c77  00000000  00000000  0001287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004fee  00000000  00000000  000134f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000184e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002ac  00000000  00000000  00018534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080007d0 	.word	0x080007d0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080007d0 	.word	0x080007d0

080001e8 <GPIO_PeriClockControl>:
 */

#include "GPIO_Driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:

// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen!
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	 //Anschalten der Clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff0e 	bl	80001e8 <GPIO_PeriClockControl>

	 //Konfigurieren des PIN in INPUT oder OUTPUT-Modus
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d81e      	bhi.n	8000412 <GPIO_Init+0x5a>
	 {
		pGPIOHandle->pGPIOx->MODE_REG &= ~(0b11 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber*2); // löschen der Bits im Mode-Register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODE_REG |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber*2); // setzen der Bits im ode Register an der jeweiligen Stelle
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	4619      	mov	r1, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
	 
	 //Konfigurieren des Pull-up/down Settings
	 
	 //Konfigurieren des Output modus
	 
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <GPIO_WriteToOutputPin>:
{
	return pGPIOx->INPUT_DATA_REG; // Registerinhalt von der zugehörigen GPIO auslesen
}

void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 800041a:	b480      	push	{r7}
 800041c:	b085      	sub	sp, #20
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	460b      	mov	r3, r1
 8000424:	70fb      	strb	r3, [r7, #3]
	if(Value <= 1){
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d81c      	bhi.n	8000466 <GPIO_WriteToOutputPin+0x4c>
		uint16_t new_val = Value; //0000 0000 0000 0001 | 0
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	81fb      	strh	r3, [r7, #14]
		new_val = (new_val << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber); // shifte 1 oder 0 an die PinNumber, an der wir ausgeben wollen
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	7912      	ldrb	r2, [r2, #4]
 8000436:	4093      	lsls	r3, r2
 8000438:	81fb      	strh	r3, [r7, #14]
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber); // lösche die Stelle im Output Register der Pinnumber
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	4619      	mov	r1, r3
 8000446:	2301      	movs	r3, #1
 8000448:	408b      	lsls	r3, r1
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	400a      	ands	r2, r1
 8000454:	615a      	str	r2, [r3, #20]
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG |= new_val; // 16 Bit Register mit new_val verodern, um an der jeweiligen Pin-Stelle 1 oder 0 zu schreiben
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6959      	ldr	r1, [r3, #20]
 800045c:	89fa      	ldrh	r2, [r7, #14]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	430a      	orrs	r2, r1
 8000464:	615a      	str	r2, [r3, #20]
	}
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <main>:
#include "GPIO_Driver.h"
#include "STM.h"
#include "main.h"

int main(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b096      	sub	sp, #88	; 0x58
 8000476:	af00      	add	r7, sp, #0
	//Lauflicht
	GPIO_Handle_t LED_Lauflicht[4];
	lauflichtInit(LED_Lauflicht);
 8000478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f89b 	bl	80005b8 <lauflichtInit>
	for(int i=0; i<2; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	657b      	str	r3, [r7, #84]	; 0x54
 8000486:	e007      	b.n	8000498 <main+0x26>
		lauflicht(LED_Lauflicht);
 8000488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f907 	bl	80006a0 <lauflicht>
	for(int i=0; i<2; i++)
 8000492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000494:	3301      	adds	r3, #1
 8000496:	657b      	str	r3, [r7, #84]	; 0x54
 8000498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800049a:	2b01      	cmp	r3, #1
 800049c:	ddf4      	ble.n	8000488 <main+0x16>


	GPIO_Handle_t ampelLED[3];

	ampelInit(&ampelLED);
 800049e:	463b      	mov	r3, r7
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f83d 	bl	8000520 <ampelInit>

	for(;;){
		setAmple(ENABLE,DISABLE,DISABLE,ampelLED);
 80004a6:	463b      	mov	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 f813 	bl	80004d8 <setAmple>

		setAmple(ENABLE,ENABLE,DISABLE,ampelLED);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 f80d 	bl	80004d8 <setAmple>

		setAmple(DISABLE,DISABLE,ENABLE,ampelLED);
 80004be:	463b      	mov	r3, r7
 80004c0:	2201      	movs	r2, #1
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 f807 	bl	80004d8 <setAmple>

		setAmple(DISABLE,ENABLE,DISABLE,ampelLED);
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f801 	bl	80004d8 <setAmple>
		setAmple(ENABLE,DISABLE,DISABLE,ampelLED);
 80004d6:	e7e6      	b.n	80004a6 <main+0x34>

080004d8 <setAmple>:
	}
}

void setAmple(int rot, int gelb, int gruen, GPIO_Handle_t* ampelLED){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
	GPIO_WriteToOutputPin(&ampelLED[0], rot);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	6838      	ldr	r0, [r7, #0]
 80004ee:	f7ff ff94 	bl	800041a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(&ampelLED[1], gelb);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	330c      	adds	r3, #12
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff8c 	bl	800041a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(&ampelLED[2], gruen);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	3318      	adds	r3, #24
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff84 	bl	800041a <GPIO_WriteToOutputPin>
	delay(5);
 8000512:	2005      	movs	r0, #5
 8000514:	f000 f8f2 	bl	80006fc <delay>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <ampelInit>:

void ampelInit(GPIO_Handle_t* ampelLED){
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	//Teil der Config, die immer gleich ist
	GPIO_PinConfig_t baseConfig;
	baseConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000528:	2301      	movs	r3, #1
 800052a:	737b      	strb	r3, [r7, #13]
	baseConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	73bb      	strb	r3, [r7, #14]
	baseConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000530:	2300      	movs	r3, #0
 8000532:	743b      	strb	r3, [r7, #16]
	baseConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]

	for	(int i = 0; i < 3; i++){
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e032      	b.n	80005a4 <ampelInit+0x84>
		ampelLED[i].pGPIOx = (GPIO_RegDef_t *)GPIOD_BASEADDR;
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <ampelInit+0x94>)
 8000550:	601a      	str	r2, [r3, #0]
		ampelLED[i].GPIO_PinConfig = baseConfig;
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	3304      	adds	r3, #4
 8000564:	f107 020c 	add.w	r2, r7, #12
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	6018      	str	r0, [r3, #0]
 800056e:	3304      	adds	r3, #4
 8000570:	7019      	strb	r1, [r3, #0]
		ampelLED[i].GPIO_PinConfig.GPIO_PinNumber = i;
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	4613      	mov	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	461a      	mov	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	711a      	strb	r2, [r3, #4]
		GPIO_Init(&ampelLED[i]);
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff0d 	bl	80003b8 <GPIO_Init>
	for	(int i = 0; i < 3; i++){
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	ddc9      	ble.n	800053e <ampelInit+0x1e>
	}
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <lauflichtInit>:

void lauflichtInit(GPIO_Handle_t * LED){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	for	(int i = 0; i < 4; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e04d      	b.n	8000662 <lauflichtInit+0xaa>
		LED[i].pGPIOx = (GPIO_RegDef_t *)GPIOD_BASEADDR;
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <lauflichtInit+0xe4>)
 80005d8:	601a      	str	r2, [r3, #0]
		LED[i].GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15 - i;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	f1c1 020f 	rsb	r2, r1, #15
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	711a      	strb	r2, [r3, #4]
		LED[i].GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	2201      	movs	r2, #1
 8000608:	715a      	strb	r2, [r3, #5]
		LED[i].GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	719a      	strb	r2, [r3, #6]
		LED[i].GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	721a      	strb	r2, [r3, #8]
		LED[i].GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	71da      	strb	r2, [r3, #7]
		GPIO_Init(&LED[i]);
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	4613      	mov	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff feae 	bl	80003b8 <GPIO_Init>
	for	(int i = 0; i < 4; i++){
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2b03      	cmp	r3, #3
 8000666:	ddae      	ble.n	80005c6 <lauflichtInit+0xe>
	}

	for(int i = 0; i < 4; i++){
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	e00e      	b.n	800068c <lauflichtInit+0xd4>
		GPIO_WriteToOutputPin(&LED[i], DISABLE);
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff feca 	bl	800041a <GPIO_WriteToOutputPin>
	for(int i = 0; i < 4; i++){
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	2b03      	cmp	r3, #3
 8000690:	dded      	ble.n	800066e <lauflichtInit+0xb6>
	}
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020c00 	.word	0x40020c00

080006a0 <lauflicht>:

void lauflicht(GPIO_Handle_t * LED){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	// GPIO_WriteToOutputPort((GPIO_RegDef_t *)GPIOD_BASEADDR, 0xFF);
	for (int i = 0; i < 4; i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e01d      	b.n	80006ea <lauflicht+0x4a>
		GPIO_WriteToOutputPin(&LED[i], ENABLE);
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff feaa 	bl	800041a <GPIO_WriteToOutputPin>
		delay(3);
 80006c6:	2003      	movs	r0, #3
 80006c8:	f000 f818 	bl	80006fc <delay>
		GPIO_WriteToOutputPin(&LED[i], DISABLE);
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe9b 	bl	800041a <GPIO_WriteToOutputPin>
	for (int i = 0; i < 4; i++){
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	ddde      	ble.n	80006ae <lauflicht+0xe>

	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <delay>:

//Zeit in Sekunden
void delay(int time){
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i<500000*time; i++);
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e002      	b.n	8000710 <delay+0x14>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <delay+0x34>)
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f4      	bhi.n	800070a <delay+0xe>
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	0007a120 	.word	0x0007a120

08000734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000762:	f000 f811 	bl	8000788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fe84 	bl	8000472 <main>

0800076a <LoopForever>:

LoopForever:
  b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000778:	080007f0 	.word	0x080007f0
  ldr r2, =_sbss
 800077c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000780:	2000001c 	.word	0x2000001c

08000784 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC_IRQHandler>
	...

08000788 <__libc_init_array>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	4d0d      	ldr	r5, [pc, #52]	; (80007c0 <__libc_init_array+0x38>)
 800078c:	4c0d      	ldr	r4, [pc, #52]	; (80007c4 <__libc_init_array+0x3c>)
 800078e:	1b64      	subs	r4, r4, r5
 8000790:	10a4      	asrs	r4, r4, #2
 8000792:	2600      	movs	r6, #0
 8000794:	42a6      	cmp	r6, r4
 8000796:	d109      	bne.n	80007ac <__libc_init_array+0x24>
 8000798:	4d0b      	ldr	r5, [pc, #44]	; (80007c8 <__libc_init_array+0x40>)
 800079a:	4c0c      	ldr	r4, [pc, #48]	; (80007cc <__libc_init_array+0x44>)
 800079c:	f000 f818 	bl	80007d0 <_init>
 80007a0:	1b64      	subs	r4, r4, r5
 80007a2:	10a4      	asrs	r4, r4, #2
 80007a4:	2600      	movs	r6, #0
 80007a6:	42a6      	cmp	r6, r4
 80007a8:	d105      	bne.n	80007b6 <__libc_init_array+0x2e>
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b0:	4798      	blx	r3
 80007b2:	3601      	adds	r6, #1
 80007b4:	e7ee      	b.n	8000794 <__libc_init_array+0xc>
 80007b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ba:	4798      	blx	r3
 80007bc:	3601      	adds	r6, #1
 80007be:	e7f2      	b.n	80007a6 <__libc_init_array+0x1e>
 80007c0:	080007e8 	.word	0x080007e8
 80007c4:	080007e8 	.word	0x080007e8
 80007c8:	080007e8 	.word	0x080007e8
 80007cc:	080007ec 	.word	0x080007ec

080007d0 <_init>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	bf00      	nop
 80007d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d6:	bc08      	pop	{r3}
 80007d8:	469e      	mov	lr, r3
 80007da:	4770      	bx	lr

080007dc <_fini>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	bf00      	nop
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr
